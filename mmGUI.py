#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.4 on Sat Oct 19 16:41:20 2013

import wx
import os
import urllib2 #for file downloading
from threading import Thread

# begin wxGlade: extracode
# end wxGlade


class mmGUI_widget(wx.Frame):
    def __init__(self, media_data, *args, **kwds):
        # begin wxGlade: mmGUI.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        self.data = media_data
        self.thread_dict = {}#will hold references to all threads
        #all controls holder (holds references to all buttons, inputs, etc.)
        self.controls={}

        #holds controls for a single row
        one_set_of_controls = {}

        #build rows
        for key in self.data.keys():
            one_set_of_controls['input_nr'] = wx.TextCtrl(self, -1, "#"+str(key), style=wx.TE_READONLY)
            one_set_of_controls['input_title'] = wx.TextCtrl(self, -1, self.data[key]['title'], style=wx.TE_READONLY)
            one_set_of_controls['input_duration'] = wx.TextCtrl(self, -1, self.data[key]['duration'], style=wx.TE_READONLY)
            one_set_of_controls['dl_btn'] = wx.Button(self, key, "Download")
            self.controls[key] = one_set_of_controls

        # self.order_nr_2 = wx.TextCtrl(self, -1, "#2", style=wx.TE_READONLY)
        # self.title_2 = wx.TextCtrl(self, -1, "Title #2", style=wx.TE_READONLY)
        # self.duration_2 = wx.TextCtrl(self, -1, "duration_2", style=wx.TE_READONLY)
        # self.dl_btn_2 = wx.Button(self, 2, "Download")
        # self.order_nr_3 = wx.TextCtrl(self, -1, "#3", style=wx.TE_READONLY)
        # self.title_3 = wx.TextCtrl(self, -1, "Title #3", style=wx.TE_READONLY)
        # self.duration_3 = wx.TextCtrl(self, -1, "duration_3", style=wx.TE_READONLY)
        # self.dl_btn_3 = wx.Button(self, 3, "Download")
        # self.order_nr_4 = wx.TextCtrl(self, -1, "#4", style=wx.TE_READONLY)
        # self.title_4 = wx.TextCtrl(self, -1, "Title #4", style=wx.TE_READONLY)
        # self.duration_4 = wx.TextCtrl(self, -1, "duration_4", style=wx.TE_READONLY)
        # self.dl_btn_4 = wx.Button(self, 4, "Download")
        # self.order_nr_5 = wx.TextCtrl(self, -1, "#5", style=wx.TE_READONLY)
        # self.title_5 = wx.TextCtrl(self, -1, "Title #5", style=wx.TE_READONLY)
        # self.duration_5 = wx.TextCtrl(self, -1, "duration_5", style=wx.TE_READONLY)
        # self.dl_btn_5 = wx.Button(self, 5, "Download")

        #footer
        self.restart_btn = wx.Button(self, -2, "restart")
        self.close_btn = wx.Button(self, -3, "close")

        self.__set_properties()
        self.__do_layout()

        #set actions for Download buttons
        for key in self.data.keys():
            self.Bind(wx.EVT_BUTTON, self.doParallelDownload, id=key)

        #set ids for footer buttons
        self.Bind(wx.EVT_BUTTON, self.doRestart, id=-2)
        self.Bind(wx.EVT_BUTTON, self.doClose, id=-3)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: mmGUI.__set_properties
        self.SetTitle("mmGUI")
        self.SetSize((340, 194))
        self.SetBackgroundColour(wx.Colour(47, 47, 79))

        for values in self.controls.values():
            values['input_nr'].Enable(False)
            values['input_title'].Enable(False)
            values['input_duration'].Enable(False)

        # self.order_nr_1.Enable(False)
        # self.title_1.Enable(False)
        # self.duration_1.Enable(False)
        # self.order_nr_2.Enable(False)
        # self.title_2.Enable(False)
        # self.duration_2.Enable(False)
        # self.order_nr_3.Enable(False)
        # self.title_3.Enable(False)
        # self.duration_3.Enable(False)
        # self.order_nr_4.Enable(False)
        # self.title_4.Enable(False)
        # self.duration_4.Enable(False)
        # self.order_nr_5.Enable(False)
        # self.title_5.Enable(False)
        # self.duration_5.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: mmGUI.__do_layout
        grid_sizer_1 = wx.GridSizer(7, 4, 0, 0)

        for values in self.controls.values():
            grid_sizer_1.Add(values['input_nr'], 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 3)
            grid_sizer_1.Add(values['input_title'], 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
            grid_sizer_1.Add(values['input_duration'], 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
            grid_sizer_1.Add(values['dl_btn'], 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 7)

        # grid_sizer_1.Add(self.order_nr_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.title_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.duration_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.dl_btn_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_1.Add(self.order_nr_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_1.Add(self.title_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.duration_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.dl_btn_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 7)
        # grid_sizer_1.Add(self.order_nr_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_1.Add(self.title_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.duration_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.dl_btn_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 7)
        # grid_sizer_1.Add(self.order_nr_4, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_1.Add(self.title_4, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.duration_4, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.dl_btn_4, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 7)
        # grid_sizer_1.Add(self.order_nr_5, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        # grid_sizer_1.Add(self.title_5, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.duration_5, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        # grid_sizer_1.Add(self.dl_btn_5, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 7)

        #Add footer
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.restart_btn, 0, 0, 0)
        grid_sizer_1.Add(self.close_btn, 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)


        self.SetSizer(grid_sizer_1)
        self.Layout()
        # end wxGlade

    def doDownload(self, track_id):  # wxGlade: mmGUI.<event_handler>
        current_path = '/'.join(__file__.split('/')[:-1])
        downloads_path = os.path.join(current_path,'Downloads')
        
        #make directory if there's none yet
        if not os.path.exists(downloads_path):
            os.mkdir(downloads_path)

        #Disable button
        self.controls[track_id]['dl_btn'].Enable(False)

        #Download and save
        cHandle = urllib2.urlopen(self.data[track_id]['dl_link'])
        print 'Downloading: ' + self.data[track_id]['title']
        music_track = cHandle.read()
        print "Done!"
        cHandle.close()

        fHandle = open(os.path.join(downloads_path,self.data[track_id]['title']+'.mp3'), 'wb')
        fHandle.write(music_track)
        fHandle.close()

        #Enable button
        self.controls[track_id]['dl_btn'].Enable(True)

        print 'Success!'

    def doParallelDownload(self, event):
        self.thread_dict[event.GetId()] = Thread(target=self.doDownload, args=(event.GetId(),))
        self.thread_dict[event.GetId()].start()
        event.Skip()

    def doRestart(self, event):  # wxGlade: mmGUI.<event_handler>
        print "Event handler `doRestart' not implemented!"
        event.Skip()

    def doClose(self, event):  # wxGlade: mmGUI.<event_handler>
        exit('Close button pressed...')
        event.Skip()

# end of class mmGUI
class mmGUI(wx.App):
    def __init__(self, hz_what_ID, media_data):
        self.data = media_data
        super(mmGUI, self).__init__(hz_what_ID)

    def OnInit(self):
        wx.InitAllImageHandlers()
        mmGUI_window = mmGUI_widget(self.data, None, -1)
        self.SetTopWindow(mmGUI_window)
        mmGUI_window.Show()
        return 1

# end of class mmGUI

if __name__ == "__main__":
    data={1:'test'}
    mmGUI_instance = mmGUI(0, data)
    mmGUI_instance.MainLoop()
